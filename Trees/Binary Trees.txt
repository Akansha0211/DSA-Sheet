		     BINARY TREES (TARGET 5 DAYS)

Q1 Level Order Traversal 

https://practice.geeksforgeeks.org/problems/level-order-traversal/1#

static ArrayList <Integer> levelOrder(Node node) 
    {
        // Your code here
        ArrayList<Integer> list = new ArrayList<>();
        Queue<Node> mq = new ArrayDeque<>();
        mq.add(node);
        while(mq.size()>0){
            int count = mq.size();
            for(int i = 0 ; i<count ; i++){
                node = mq.remove();
                list.add(node.data);
                
                if(node.left != null){
                    mq.add(node.left);
                }
                if(node.right != null){
                    mq.add(node.right);
                }
            }
        }
        return list;
    }





https://leetcode.com/problems/binary-tree-level-order-traversal/

public List<List<Integer>> levelOrder(TreeNode root) {
        // List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        Queue<TreeNode> q = new ArrayDeque<>();
        if(root == null) return list;
        q.add(root);
        while(q.size()>0){
            int count = q.size();
            List<Integer> sublist = new ArrayList<>();
            for(int i = 0 ; i<count ; i++){
                TreeNode node = q.remove();
                sublist.add(node.val);
                
                if(node.left!= null){
                    q.add(node.left);
                }
                if(node.right != null){
                    q.add(node.right);
                }
            }
            list.add(sublist);
        }
        return list;
    }


Q2 Reverse Level Order Traversal

https://practice.geeksforgeeks.org/problems/reverse-level-order-traversal/1#

public ArrayList<Integer> reverseLevelOrder(Node node) 
    {
        // code here
        ArrayList<Integer> list = new ArrayList<>();
        Stack<Node> st = new Stack<>();
        Queue<Node> q = new ArrayDeque<>();
        q.add(node);
        while(q.size()>0){
            node = q.remove();
            if(node.right != null){
                q.add(node.right);
            }
            if(node.left != null){
                q.add(node.left);
            }
            st.push(node);
        }
        while(!st.isEmpty()){
            node = st.pop();
            list.add(node.data);
        }
        return list;
    }
