		Tree(Target 7 days)

	GENERIC TREES...

Q1 Given an array create tree and print it 
			10
		      /  |  \
                     /   |   \
                   20    30    40
                  /|     /|\     \ 
                50 60  70 80 90  100
                         / \
                       110 120

Output
10 -> 20,30,40,.
20 -> 50,60,.
50 -> .
60 -> .
30 -> 70,80,90,.
70 -> .
80 -> 110,120,.
110 -> .
120 -> .
90 -> .
40 -> 100,.
100 -> .

Expectation : d(10) -> print itself and its family
Faith : d(20), d(30), d(40) will print themselves and their families
Faith to Expectataion : d(10) = self(10) + d(20) + d(30) + d(40)



import java.util.ArrayList;
import java.util.Stack;

public class Tree {
    private static class Node{
        int data;
        ArrayList<Node> children = new ArrayList<>();
    }
	// recursive fn to display a tree
    public static void display(Node node){
        String str = node.data + " -> ";
        for(Node child : node.children){
            str+= child.data + ", ";
        }
        str+=".";
        System.out.println(str);
        for (Node child : node.children){
            display(child);
        }
    }
    public static void main(String[] args) {
        int arr[] = {10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1};
        Node root = null;
	//create a tree
        Stack<Node> st = new Stack<>();
        for(int i = 0; i<arr.length; i++){
            if(arr[i] == -1){
                st.pop();
            }else{
                Node temp = new Node();
                temp.data = arr[i];

                if(st.size()>0){
                    st.peek().children.add(temp);
                }else{
                    root = temp;
                }
                st.push(temp);
            }
        }
	//display a tree
        display(root);
    }
}


Q2 Size of a tree

public static int size(Node node){
        int size = 0;
        for(Node child : node.children){
            int cs = size(child);
            size+=cs;
        }
        size+=1;
        return size;
    }


Q3 Maximum in a generic tree

public static int maximum(Node node){
        int max = node.data;
        for(Node child : node.children){
            int data = maximum(child);
            if (data>max){
                max = data;
            }
        }
        return max;
    }

Q4 Height of tree (according to edges)

public static int height(Node node){
        int ht = -1;
        for(Node child :node.children){
            int data = height(child);
            ht = Math.max(data,ht);
        }
        ht+=1;
        return ht;
    }

Q5 Traversal in tree 

public static void traversals(Node node){
        System.out.println("Node Pre "+ node.data);
        for (Node child : node.children){
            System.out.println("Edge Pre "+ node.data+"--"+child.data);
            traversals(child);
            System.out.println("Edge Post "+ node.data+"--"+child.data);
        }
        System.out.println("Node Post "+ node.data);
    }

Q6 Level order traversal of a tree

public static void levelOrder(Node node){
        Queue<Node> q = new ArrayDeque<>();
        q.add(node);
        while (q.size()>0){
            node = q.remove();
            System.out.print(node.data+" ");
            for (Node child : node.children){
                q.add(child);
            }
        }
        System.out.print(".");
    }






	BINARY TREES


Q7 Construction of a binary tree


import java.util.Stack;

public class Tree {
    public static class Node{
        int data;
        Node left;
        Node right;
        Node(int data, Node left, Node right){
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }
    public static class Pair{
        Node node;
        int state;
        Pair(Node node, int state){
            this.node = node;
            this.state = state;
        }
    }
    public static void main(String[] args) {
        Integer[] arr = {50,25,12,null,null,37,30,null,null,null,75,62,null,70,null,null,87,null,null};

        Node root = new Node(arr[0],null,null);
        Pair rtp = new Pair(root,1);

        Stack<Pair> st = new Stack<>();
        st.push(rtp);

        int index = 0;
        while (st.size()>0){
            Pair top = st.peek();
            if (top.state == 1){
                index++;
                if(arr[index]!= null){
                    Node ln = new Node(arr[index], null, null);
                    top.node.left = ln;
                    Pair lp = new Pair(ln,1);
                    st.push(lp);
                }else{
                    top.node.left = null;
                }
                top.state++;
            }else if (top.state == 2){
                index++;
                if (arr[index] != null){
                    top.node.right = new Node(arr[index],null,null);
                    Pair rp = new Pair(top.node.right,1);
                    st.push(rp);
                }else {
                    top.node.right = null;
                }
                top.state++;

            }else {
                st.pop();
            }
        }

    }
}

Q8 Display a Binary Tree

Generic tree -> no base case (recusrion is in loop , when childern = 0 no call )
Binary Tree -> Recusrion -> direct call (need base case to avoid null pointer exception)


public static void display(Node node){
        if (node == null){
            return;
        }
        String str = "";
        str += node.left == null ? "." : node.left.data +"";
        str += " <- " + node.data + " -> ";
        str += node.right == null ? "." : node.right.data + "";
        System.out.println(str);

        display(node.left);
        display(node.right);
    }

