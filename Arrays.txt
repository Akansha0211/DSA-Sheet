		ARRAYS QUESTIONS (TARGET 8 DAYS)

Q1  Reverse a String(DEALS WITH STRING AND ARRAY)
(Naive approach)

	String rev = "";
        for(int i = str.length()-1; i>=0; i--){
            rev+=str.charAt(i);
        }
        return rev;

(Approach 1)
Using Built-in methods of StringBuilder (append and reverse)

	StringBuilder str1 = new StringBuilder();
        str1.append(str);
        str1.reverse();
        return str1.toString();

(Approach 2)
public static String reverseWord(String str)
    {
        // Reverse the string str
        char arr[] = str.toCharArray();
        int start = 0;
        int end = arr.length-1;
        while(start<end){
            char temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
        return new String(arr);
    }

(Approach 3)
Reverse using stack

String rev = "";
        int n = S.length();
        Stack<Character> st = new Stack<>();
        for(int i = 0;i<n; i++){
            st.push(S.charAt(i));
        }
        while(!st.isEmpty()){
            rev+= st.pop();
        }
        return rev;



Q2  Find minimum and maximum element in an array

https://practice.geeksforgeeks.org/problems/find-minimum-and-maximum-element-in-an-array4428/1#

https://www.youtube.com/watch?v=txd3UKiSD5Q
(Approach 1)
when pair class was given to us in the code..

1.Initialize first element as max, min
2. Now compare with every element
Time Complexity = O(n)
No of comparisions : a) Best case: n-1 (Descending order)
		     b) Worst case : 2(n-1)  (Ascending order)
             
static pair getMinMax(long a[], long n)  
    {
        
        pair p = new pair(a[0],a[0]);
        for(int i = 1; i<n; i++){
            if(a[i]>p.second){
                p.second = a[i];
            }else if(a[i]<p.first){
                p.first = a[i];
            }
        }
        return p;
    }

(Appproach 2) 
Comparing in pairs
1. n = odd -> min = max = a[0]
   n = evn -> min= a[0] , max = a[1]
		check if a[0]>a[1] if so then max = a[0] & min = a[1]
		      if a[0]<a[1] if so then max = a[1] & min = a[0]
2.then compare in pairs 
		if a[i] > a[i+1] then max among both is a[i] which is then compared to the max
				 & min among both is a[i+1] which is then compared to min
		if a[i] < a[i+1] then min is a[i] which is comp to min
				 & max is a[i+1] , comp to max.
Time complexity : O(n)
No of comparisions: 2 elements -> 3 comparsion
		    for n elements -> 3n/2 comparisions
			odd -> 3(n-1)/2
			even -> 3(n-2)/2  + 1 (for a[0] & a[1] comp)
				= 3n-4/2 = 3n/2 -2


	int i;
        pair p;
        if(n%2==0){
            if(a[0]>a[1]){
                p = new pair(a[1],a[0]);
            }else{
                p = new pair(a[0],a[1]);
            }
            i = 2;
        }else{
            p = new pair(a[0],a[0]);
            i=1;
        }
        while(i<n-1){
            if(a[i]>a[i+1]){
                if(a[i]>p.second){
                    p.second = a[i];
                }
                if(a[i+1]<p.first){
                    p.first = a[i+1];
                }
            }else{
                if(a[i+1]>p.second){
                    p.second = a[i+1];
                }
                if(a[i]<p.first){
                    p.first = a[i];
                }
            }
            i = i+2;
        }
        return p;

Q3 Find the Kth max and min element of an array

(Naive Approach)
	Arrays.sort(arr);
        return arr[k-1];
Time complexity = O(nlogn) ( Sorting -> Merge,heap)

(Approach 2)
(Heap)

(Approach 3)
(Quick Select)



Q4 Sort an array of 0,1 and 2 (Without using any sorting algo)

(Approach 1)
Count sort
1.count zeroes, ones and twos
2. then place that many no.of 0's , 1's and 2's in the array
(No need to take extra array)
0-> cnt_zeroes
cnt_zeroes -> cnt_zeroes + cnt_ones
cnt_zeroes + cnt_ones -> n

	int cnt_zeroes = 0;
        int cnt_ones = 0;
        int cnt_twos = 0;
        
        for(int i = 0; i<n; i++){
            if(a[i]==0){
                cnt_zeroes+=1;
            }
            if(a[i]==1){
                cnt_ones +=1;
            }
            if(a[i]==2){
                cnt_twos +=1;
            }
        }
        for(int i = 0; i<cnt_zeroes; i++){
            a[i] = 0;
        }
        for(int i = cnt_zeroes; i< cnt_zeroes+cnt_ones; i++){
            a[i] = 1;
        }
        for(int i = cnt_zeroes+cnt_ones; i<n; i++){
            a[i] = 2;
        }

(Approach 2)
Dutch National Flag Algo

a[0,..low-1] = 0
a[high,... n] = 2
a[low....mid-1] = 1

if a[mid] = 0 then swap a[low], a[mid]
		    low++, mid++
if a[mid] = 1 then mid++
if a[mid] = 2 then swap a[mid], a[high]
		       high--


	int lo = 0;
        int hi = a.length - 1;
        int mid = 0, temp = 0;
        while (mid <= hi){
            if(a[mid] == 0){
                temp = a[lo];
                a[lo] = a[mid];
                a[mid] = temp;
                lo++;
                mid++;
            }
            else if(a[mid]==1){
                mid++;
            }
            else if(a[mid] == 2){
                temp = a[mid];
                a[mid] = a[hi];
                a[hi] = temp;
                hi--;
            }
        }



Q5 Move all the negative elements to one side of the array

https://practice.geeksforgeeks.org/problems/move-all-negative-elements-to-end1813/1

https://leetcode.com/problems/sort-array-by-parity/

Ask 2 ques to interviewer:
1. Extra space allowed ?
2. Order of elements is to be maintained ?

2 variations in Q
a
input : -2, 3,-1, 8, -3, 6, -5, 9
output : -2, -1, -3, -5, 3, 8, 6, 9
b
input : -2, 3,-1, 8, -3, 6, -5, 9
output : 3, 8, 6, 9, -2, -1, -3, -5

Naive Approach 
(solving b variation)

1. Take an array 
2. Run a loop & copy all positive elements in it 
3. then copy all the negative elements inside it.
(In this approach order of + and - elements is maintained)

	int temp[] = new int[n];
        int j = 0;
        for(int i = 0; i<n; i++){
            if(arr[i]>=0){
                temp[j] = arr[i];
                j++;
            }
        }
        // if(j==n||j==0){
        //     return;
        // }
        for(int i = 0; i<n; i++){
            if(arr[i]<0){
                temp[j] = arr[i];
                j++;
            }
        }
        for(int i = 0; i<n; i++){
            arr[i] = temp[i];
        }
 

(When order is not to be maintained)
Two pointer approach

left right
 -     -    --> right--
 +     -    --> left++, right--
 +     +    --> left++
 -     +    --> swap(arr[left], arr[right]), left++, right--

Time complexity : o(n)
Space complexity: o(1)

	int left = 0;
        int right = arr.length-1;
        while(left<=right){
            if(arr[left]<0 &&arr[right]<0){
                right--;
            }
            else if(arr[left]>0 && arr[right]<0){
                left++;
                right--;
            }
            else if(arr[left]>0 && arr[right]>0){
                left++;
            }
            else{
                int temp = arr[left];
                arr[left] = arr[right];
                arr[right]= temp;
                left++;
                right--;
            }
        }


(Approach 3)
1 -1 3 2 -7 -5 11 6
your output is: 
1 3 2 11 6 -5 -1 -7 
(Order of negative elements is not maintained)

	int j = 0; // to track - elements 
        for(int i = 0; i<n; i++){
            if(arr[i]>0){
                if(i!=j){
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
                j++;
            }
        }


Q6 Union and Intersesction of two sorted arrays

https://www.geeksforgeeks.org/union-and-intersection-of-two-sorted-arrays-2/


UNION
(Approach 1)
Use HashSet

1.Take a empty set
2. loop through first array and place its elements inside the Set
3. Loop through second array and place its elemenst inside Set
(Set contains a single element only once --> task done automatically)

	Set<Integer> finalUnion = new HashSet<>();
        int i = 0;
        int j = 0;
        while(i<a.length){
            finalUnion.add(a[i]);
            i++;
        }
        while(j<b.length){
            finalUnion.add(b[j]);
            j++;
        }
        return finalUnion.size();
    

INTERSECTION 
(Approach 1)
Use HashSet

	HashSet<Integer> hs = new HashSet<>();
        HashSet<Integer> hs1 = new HashSet<>();
        int count = 0;
        for(int i = 0; i<n; i++){
            hs.add(a[i]);
        }
        for(int i = 0; i<m; i++){
            hs1.add(b[i]);
        }
        for(int set: hs1){
            if(hs.contains(set)){
                count++;
            }
            
        }
        return count;    


Q7 Cylically rotate an array by one

https://practice.geeksforgeeks.org/problems/cyclically-rotate-an-array-by-one2614/1#
https://practice.geeksforgeeks.org/problems/rotate-array-by-n-elements/0
https://leetcode.com/problems/rotate-array/

input : 1 2 3 4 5
output: 5 1 2 3 4
(Naive aproach)
Time complexity = O(n)
	
	long last = arr[arr.length-1];
        for(int i = arr.length-1; i>0; i--){
            arr[i] = arr[i-1];
        }
        arr[0] = last;


FOR VARIATION IN Q
input : 1 2 3 4 5
output: 3 4 5 1 2

(Approach 1)
(SOLN BELOW GIVNG TLE)
Time complexity: O(n*d)

for(int i = 0; i<D; i++){
	rotateLeft(arr, N, D);
}
public static void rotateLeft(int arr[], int N , int D){
	   int temp = arr[0];
	   for(int i = 0; i<N-1; i++){
	       arr[i] = arr[i+1];
	   }
	   arr[N-1] = temp;
}

(Approach 2)
1. Take out first d eements  abd store inside temp array
2. Left shift the array elements
3. Store the temp array elemets back to the original array(after left shift of its elements)

Time complexity: O(n)
Space complexity : O(d)

	    int temp[] = new int[D];
	    for(int i = 0; i<D; i++){
	        temp[i] = arr[i];
	    }
	    for(int i = D; i<N; i++){
	        arr[i-D] = arr[i];
	    }    
	   // for(int i = N-D; i<N; i++){
	   //     for(int j = 0; j<temp.length; j++){
	   //         arr[i] = temp[j];
	   //     }
	   // }
	   int i = N-D;
	   int j = 0;
	   while(i<N && j<D){
	       arr[i] = temp[j];
	       i++;
	       j++;
	   }


(Juggling Algorithm)
LATER...
(Reversal Algorithm)

(Block-swap Algorithm)


Q8 Largest sum contigous Subarray


(Approach 1)
(Brute Force)
Time complexity: O(n^3)  _-> using 3 nested loops
Gives TLE

	int max = arr[0];
        for(int i = 0; i<n; i++){
            for(int j = i; j<n; j++){
                int sum = 0;
                for(int k = i; k<=j; k++){
                    sum += arr[k];
                    if(sum > max){
                        max = sum;
                    }
                }
            }
        }
        return max;

(Approach 2)
(Brute Force)
Time complexity: O(n^2) --> using 2 nested loops
Gives TLE

	int max = arr[0];
        for(int i = 0; i<n; i++){
            int sum = 0;
            for(int j = i; j<n; j++){
                sum+=arr[j];
                if(sum>max){
                    max = sum;
                }
            }
        }
        return max;

(Approach 3)
Kadane Algorithm ( V. IMP)
Time complexity: O(n)
Space complexity: O(1)

	int sum = 0;
        int max = arr[0];
        for(int i = 0; i<n; i++){
            sum+=arr[i];
            if(sum>max){
                max = sum;
            }
            if(sum<0){
                sum = 0;
            }
        }
        return max;


Q9 Minimum no.of Jumps to reach end of array

(Naive approach)
Recursion
1 4 3 2 6 7

jumps(1,7) = min(jumps(4,7))
jumps(4,7) = min(jumps(3,7)),
	     min(jumps(2,7)),
	     min(jumps(6,7)),
             min(jumps(7,7)
(jumps(7,7) returns 0)
jumps(3,7) = min(jumps(2,7)),
             min(jumps(6,7)),
             min(jumps(7,7))
...


Time compelexity : O(n^n) (doubt)

(Approach 2)
DP
LATER...


Q10 Duplicate in an array of N+1 integers

(Approach 1)
Sorting
1. Sort the array
2. Duplicate numbers will be adjacent to each other.

Time complexity : O(nlogn)

 	Arrays.sort(nums);
        for(int i = 1; i<nums.length; i++){
            if(nums[i]==nums[i-1]){
                return nums[i];
            }
        }
        return -1;

(Approach 2)
HashSet ( contains, add) 
1. Run a loop and add array elements into the set
2. set adds only when element not present already , so check if set contains element already then return that element.

Time complaexity: O(n)
Space complexity: O(1)

	Set<Integer> set = new HashSet<>();
        for(int element: nums){
            if(set.contains(element)){
                return element;
            }else{
                set.add(element);
            }
        }
        return -1;

(Approach 3)
Cycle detection method(Floyd's Tortoise and Hare method)
Later...

Q11 Merge two sorted arrays (Without using extra space)

(Naive Approach) 
if extra space allowed (or here can also use Two Pointer Algo)
1. Take a temp array
2. Copy elemnts of 1st array into temp array
3. Copy elmnts of 2nd array into temp array
4. Sort the temp array.
5. Now copy the elemts back to the original arrays.
Time complexity: O(nlogn)+ O(n) +O(n)
Space complexity: O(n)

	int arr[] = new int[n+m];
        int i = 0;
        for(int element : arr1){
            arr[i] = element;
            i++;
        }
        for(int element: arr2){
            arr[i] = element;
            i++;
        }
        Arrays.sort(arr);
        int k = 0;
        for(int j = 0; j<arr1.length; j++){
            arr1[j] = arr[j];
            k++;
        }
        for(int j = 0; j<arr2.length; j++){
            arr2[j] = arr[k];
            k++;
        }


(Approach 2)
1. compare arr 1 with arr2 , if arr 1 element is greater than arr2 then swap it with arr2 element
2. Sort arr2

No extra space taken in this approach
Gives TLE

	int i = 0;
        int j = 0;
        while(i<n && j<m){
            if(arr1[i]<arr2[j]){
                i++;
                
            }
            if(arr1[i]>arr2[j]){
                int temp = arr1[i];
                arr1[i] = arr2[j];
                arr2[j] = temp;
                i++;
                Arrays.sort(arr2);
            }
        }

(Approach 3)
Gap method

Later...

Q12 Merge Intervals

(Approach 1)
Using stack
1. sort the array acc to start(comparable, compareTo)
2. push/merge the elements in stack with sorted elemnts:
push the first element (always)
merge --> when new element start is less than stack top ke last se.
push --> when new element start is greater than top element end

in case of merge (decide the top element end)
for that --> max(new elemt end, top elemnt end)


(Approach 2)
	List<int[]>res  = new ArrayList<>();
        Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        int start = intervals[0][0];
        int end = intervals[0][1];
        
        for(int el[] : intervals){
            if(el[0]<=end){
                end = Math.max(end, el[1]);
            }else{
                res.add(new int[]{start,end});
                start = el[0];
                end = el[1];
            }
        }
        res.add(new int[]{start,end});
        return res.toArray(new int[0][]);


Q13 Next Permutation

(Naive approach)
Generate all possible permutations of an array 
Then iterate using loop and find the next greater permutation
Time complexity: O(n!)
1 3 2  --> 1 2 3
	   1 3 2
           2 1 3
           2 3 1
           3 1 2
           3 2 1
3 numbers can be arranged(permutations poss) = 3! = 6
for n numbers --> n!

(Approach 2)
1.start loop from backwarrds and find a[i]>a[i+1]
Eg  1 3 5 4 2 (here, 3 is decreasing no.)
2.start loop again from back and find next greater number 
3. swap both
4. reverse from the index+1 to length-1

 	int i = nums.length-2;
        while(i>=0 && nums[i]>=nums[i+1]){
            i--;
        }
        if(i>=0){
            int j = nums.length-1;
            while(j>=i+1 && nums[j]<=nums[i]){
                j--;
            }
            swap(nums,i,j);
        }
        reverse(nums,i+1,nums.length-1);
    }
    public static void swap(int nums[], int i , int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public static void reverse(int nums[], int i, int j){
        while(i<j){
            swap(nums,i,j);
            i++;
            j--;
        }
    }


Q14 Count Inversions

(Naive approach)
Brute Force
Time complexity:O(n^2)
Gives TLE

	int count = 0;
        for(int i = 0; i<N-1; i++){
            for(int j = i+1; j<N; j++){
                if(arr[i]>arr[j]){
                    count++;
                }
            }
        }
        return count;

(Approach 2)


Q15 Best time to buy and sell stock

(Brute Force)
Gives TLE
Time complexity:O(n^2)
Space complexity:O(1)

	int maxProfit = 0;
        for(int i = 0; i<prices.length; i++){
            for(int j = i+1; j<prices.length; j++){
                if((prices[j]-prices[i])>maxProfit){
                    maxProfit = prices[j]-prices[i];
                }
            }
        }
        return maxProfit;


(Approach 2)

Time complexity:O(n)
Space complexity:O(1)

	int minPrice = Integer.MAX_VALUE;
        int maxProfit = 0;
        for(int i = 0; i<prices.length; i++){
            if(prices[i]<minPrice){
                minPrice = prices[i];
            }
            else if(prices[i]-minPrice > maxProfit){
                maxProfit = prices[i]-minPrice;
            }
        }
        return maxProfit;

Q16 Find all pairs on integer array whose sum is equal to given number

(Naive approach)
Time complexity:O(n^2)
Gives TLE

	int pair = 0;
        for(int i = 0; i<arr.length-1; i++){
            for(int j = i+1; j<arr.length; j++){
                if(arr[i]+arr[j]==k){
                    pair+=1;
                }
            }
        }
        return pair;

(Approach 2)
Using HashMap
LATER...


Q17 Find common elements in 3 sorted arrays

(Approach 1)
Time complaexity : O(n1+n2+n3)

	ArrayList<Integer> common = new ArrayList<>();
        int i = 0, j=0, k=0;
        while(i<A.length && j<B.length && k<C.length){
            if(A[i]==B[j]&& B[j]==C[k]){
                if(!common.contains(A[i])){
                    common.add(A[i]);
                    
                }
                i++;
                j++;
                k++;
            }
            else if(A[i]<B[j]){
                i++;
            }
            else if(B[j]<C[k]){
                j++;
            }
            else{
                k++;
            }
        }
        return common;


(Approach 2)
1. Delete all duplicate  from arr 1 in  linear time(similarly from arr2 and arr3)
2. calculate the freq of each element (using array)
3. if freq == 3 --> we have found an element common in 3 arrays

CODE (GETTING SOME BUGS RN)...



Q18 Find if there is any subarray with sum equal to 0 

(Naive approach)
Time complexity:O(n^2)

(Approach 2)
Time complexity:O(n)
Space complexity:O(n)
(Trade-off is there)

	Set<Integer> set = new HashSet<>();
        int sum = 0;
        for(int i = 0; i<arr.length; i++){
            sum+=arr[i];
            if(arr[i]==0 || sum ==0 || set.contains(sum)){
                return true;
            }else{
                set.add(sum);
            }
        }
        return false;


Q19 Find factorial of a large number

(Approach 1)
Using ArrayList

ArrayList<Integer>list = new ArrayList<>();
        list.add(0,1);
        int len = 1;
        for(int x = 2; x<=N; x++){
            len = multiply(x,len,list);
        }
        Collections.reverse(list);
        return list;
    }
    public static int multiply(int x, int len, ArrayList<Integer>list){
        int carry = 0;
        for(int i = 0; i<len; i++){
            int pro = list.get(i)*x +carry;
            list.set(i,pro%10);
            carry = pro/10;
        }
        while(carry!=0){
            list.add(len,carry%10);
            carry = carry/10;
            len++;
        }
        return len;
(Approach 2)
Using BigInteger
but BIg integer has a limit to a certain point...

Q20 Find maximum product subarray

(Approach 1)Brute Force
Time complexity : O(n^2)

Test Cases 
[0,2] for checking single elements added another max()
[-3,0,1,2]


	long max_prod = arr[0];
        for(int i = 0; i<n; i++){
            long prod = arr[i];
            for(int j = i+1; j<n; j++){
                max_prod = Math.max(prod,max_prod);
                prod = prod*arr[j];
                
            }
            max_prod = Math.max(max_prod,prod);
        }
        return max_prod;




