		DP (15th July)

Q1 Longest Increasing Subsequence
https://leetcode.com/problems/longest-increasing-subsequence/

(Approach 1)

public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        int overall_max = 0;
        for(int i = 0; i<n; i++){
            int max = 0;
            for(int j = 0; j<i; j++){
                if(nums[j]<nums[i]){
                    max = Math.max(max,dp[j]);
                }
            }
            dp[i] = max + 1;
            overall_max = Math.max(overall_max,dp[i]);
        }
        
        return overall_max;
    }

(Approach 2) 

public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        int ans = 0;
        for(int num : nums){
            int i = 0;
            int j = ans;
            while(i<j){
                int mid = i + (j - i)/2;
                if(dp[mid]<num){
                    i = mid + 1;
                }else{
                    j = mid;
                }
            }
            dp[i] = num;
            if(i == ans){
                ans++;
            }
        }
        return ans;
    }



Q2 Building Bridges
https://www.hackerrank.com/contests/mtech-cse-2016-practice-test-2/challenges/building-bridges

(Approach 1)



Q3 Russian Doll Envelopes
https://leetcode.com/problems/russian-doll-envelopes/

class Solution {
    static class Pair implements Comparable<Pair>{
        int width;
        int height;
        Pair(int width, int height){
            this.width = width;
            this.height = height;
        }
        public int compareTo(Pair o){
            return this.width - o.width;
        }
    }
    public int maxEnvelopes(int[][] envelopes) {
        int n = envelopes.length;
        Pair[] envlps = new Pair[n];
        for(int i = 0; i<n ; i++){
            Pair pair = new Pair(envelopes[i][0], envelopes[i][1]);
            envlps[i] = pair;
        }
        Arrays.sort(envlps);
        int[] dP = new int[n];
        int omax = 0;
        for(int i = 0; i<dP.length; i++){
            int max = 0;
            for(int j = 0; j<i; j++){
                if(envlps[j].height < envlps[i].height && envlps[j].width < envlps[i].width){
                    if(dP[j]>max){
                        max = dP[j];
                    }
                }
            }
            dP[i] = max + 1;
            if(dP[i]>omax){
                omax = dP[i];
            }
        }
        return omax;
    }
}


			HOMEWORK(15th July)
		
Q1 Buy and sell stocks (single transaction allowed) 
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

(Approach 1)

public int maxProfit(int[] prices) {
        int lsf = Integer.MAX_VALUE; // Least price
        int profit = 0; // Profit if sold today
        int overall_profit = 0;
        for(int i = 0; i<prices.length; i++){
            if(prices[i] < lsf){
                lsf = prices[i];
            }
            profit = prices[i] - lsf;
            if(profit > overall_profit){
                overall_profit = profit;
            }
        }
        return overall_profit;
    }

Q2 Buy and Sell Stocks (Infinite Transactions)
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

(Approach 1)

public int maxProfit(int[] prices) {
        int buy_date = 0;
        int sell_date = 0;
        int profit = 0;
        for(int i = 1; i<prices.length; i++){
            if(prices[i] >= prices[i-1]){
                sell_date = i;
            }else{
                profit += prices[sell_date] - prices[buy_date];
                buy_date = sell_date = i;
            }
        }
        profit += prices[sell_date] - prices[buy_date];
        return profit;
    }

Q3 Best Time to buy and sell stocks With Transaction Fee
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/

(Approach 1)

public int maxProfit(int[] prices, int fee) {
        int obp = -prices[0];
        int osp = 0;
        for(int i = 1; i< prices.length; i++){
            int nbp = 0;
            int nsp = 0;
            if(osp - prices[i] > obp){
                nbp = osp - prices[i];
            }else{
                nbp = obp;
            }
            if(obp + prices[i] - fee > osp){
                nsp = obp + prices[i] - fee;
            }else{
                nsp = osp;
            }
            obp = nbp;
            osp = nsp;
        }
        return osp;
    }

Q4 Buy and Sell Stocks with Cool down - Infinite Transactions
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/

(Approach 1)

public int maxProfit(int[] prices) {
        int obsp = -prices[0];
        int ossp = 0;
        int ocsp = 0;
        for(int i = 1; i<prices.length; i++){
            int nbsp = 0;
            int nssp = 0;
            int ncsp = 0;
            if(ocsp - prices[i] > obsp){
                nbsp = ocsp - prices[i];
            }else{
                nbsp = obsp;
            }
            
            if(obsp + prices[i] > ossp){
                nssp = obsp + prices[i];
            }else{
                nssp = ossp;
            }
            
            if(ossp > ocsp){
                ncsp = ossp;
            }else{
                ncsp = ocsp;
            }
            obsp = nbsp;
            ossp = nssp;
            ocsp = ncsp;
        }
        return ossp;
    }


		DP(17th July)
Q1 Paint Fence
https://www.lintcode.com/problem/514/description

(Approach 1)

public int numWays(int n, int k) {
        // write your code here
        if(n==1){
            return k;
        }
        int same = k*1;
        int diff = k*(k-1);
        int total = same + diff;
        for(int i = 3; i<=n; i++){
            same = diff *1;
            diff = total*(k-1);
            total = same + diff;
        }
        return total;
    }

Q2 Maximum Sum Non Adjacent Elements

(Approach 1)

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i<arr.length;i++){
            arr[i] = sc.nextInt();
        }
        int incl = arr[0];
        int excl = 0;
        for (int i = 1; i<arr.length; i++){
            int new_incl = excl + arr[i];
            int new_excl = Math.max(incl,excl);

            incl = new_incl;
            excl = new_excl;
        }
        System.out.println(Math.max(incl,excl));
    }

Q3 Paint House 
https://www.lintcode.com/problem/515/

(Approach 1)

public int minCost(int[][] costs) {
        // write your code here
        int n = costs.length;
        if(costs.length == 0){
            return 0;
        }
        int[][] dp = new int[n][3];
        dp[0][0] = costs[0][0];
        dp[0][1] = costs[0][1];
        dp[0][2] = costs[0][2];
        for(int i = 1; i<costs.length; i++){
            dp[i][0] = costs[i][0] + Math.min(dp[i-1][1],dp[i-1][2]);
            dp[i][1] = costs[i][1] + Math.min(dp[i-1][0],dp[i-1][2]);
            dp[i][2] = costs[i][2] + Math.min(dp[i-1][0],dp[i-1][1]);
        }
        // int n = costs.length;
        int ans = Math.min(dp[n-1][0],Math.min(dp[n-1][1],dp[n-1][2]));
        return ans;
    }

Q4 Paint House II
https://www.lintcode.com/problem/516/

(Approach 1)

public int minCostII(int[][] costs) {
        // write your code here
        if(costs.length == 0){
            return 0;
        }
        int[][] dp = new int[costs.length][costs[0].length];
        int least = Integer.MAX_VALUE;
        int sleast = Integer.MAX_VALUE;
        for(int i = 0; i<dp[0].length; i++){
            dp[0][i] = costs[0][i];
            if(dp[0][i]<=least){
                sleast = least;
                least = costs[0][i];
            }else if(dp[0][i]<=sleast){
                sleast = costs[0][i];
            }
        }
        for(int i = 1; i<dp.length; i++){
            int nleast = Integer.MAX_VALUE;
            int nsleast = Integer.MAX_VALUE;
            for(int j = 0; j<dp[0].length; j++){
                if(dp[i-1][j] == least){
                    dp[i][j] = sleast + costs[i][j];
                }else{
                    dp[i][j] = least + costs[i][j];
                }

                if(dp[i][j]<=nleast){
                    nsleast = nleast;
                    nleast = dp[i][j];
                }else if(dp[i][j]<=nsleast){
                    nsleast = dp[i][j];
                }
            }
            least = nleast;
            sleast = nsleast;
        }
        return least;
    }

Q5 Count possible ways to construct buildings
https://www.geeksforgeeks.org/count-possible-ways-to-construct-buildings/
https://www.hackerearth.com/problem/algorithm/ways-to-construct-buildings/

(Approach 1)

public static void main(String args[] ) throws Exception {
        // Write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int obuilding = 1;
        int ospace= 1;
        for(int i = 2; i<=n; i++){
            int nbuidling = ospace;
            int nspace = obuilding + ospace;
            
            obuilding = nbuidling;
            ospace = nspace;
        }
        int total = obuilding + ospace;
        total = total * total;
        System.out.println(total);

    }

Q6 Nth Catalan Number

(Approach 1)

Q7 Total number of possible binary search trees 
https://leetcode.com/problems/unique-binary-search-trees/

(Approach 1)
public int numTrees(int n) {
        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i =2; i<=n; i++){
            int l = 0;
            int r = i-1;
            while(l<=i-1){
                dp[i]+=dp[l]*dp[r];
                l++;
                r--;
            }
        }
        return dp[n];
    }

Q8 Count Valid Brackets

(Approach 1)

public static void main(String[] args) throws Exception {
    // write your code here
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] dp = new int[n+1];
    dp[0] = 1;
    dp[1] = 1;
    for(int i = 2; i<=n;i++){
        int inside = i-1;
        int outside = 0;
        while(inside >= 0){
            dp[i]+=dp[inside]*dp[outside];
            inside--;
            outside++;
        }
    }
    System.out.println(dp[n]);
 }

Q9 Count of Valleys and Mountains


		DP(18 July)

Q10 Buy and Sell stocks - single transaction
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

(Approach 1)
public int maxProfit(int[] prices) {
        int dp_i10 = 0;
        int dp_i11 = Integer.MIN_VALUE;
        for(int val : prices){
            dp_i10 = Math.max(dp_i10, dp_i11 + val);
            dp_i11 = Math.max(dp_i11,-val);
            
        }
        return dp_i10;
    }

Q11 Buy and sell stocks -infinite transaction

Q12 Buy and Sell Stocks - atmost 2 transactions
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/

(Approach 1) 
public int maxProfit(int[] prices) {
        int dp_i10 = 0;
        int dp_i20 = 0;
        int dp_i11 = Integer.MIN_VALUE;
        int dp_i21 = Integer.MIN_VALUE;
        for(int val : prices){
            dp_i20 = Math.max(dp_i20,dp_i21+val);
            dp_i21 = Math.max(dp_i21, dp_i10-val);
            dp_i10 = Math.max(dp_i10,dp_i11+val);
            dp_i11 = Math.max(dp_i11, -val);
        }
        return dp_i20;
    }

Q13 Highway Billboard Problem

(Approach 1)
public static int solution(int m , int[] x, int[] rev, int t) {
        // write your code here
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0; i<x.length; i++){
            map.put(x[i], rev[i]);
        }
        int[] dp = new int[m+1];
        dp[0] = 0;
        for(int i = 1; i<=m; i++){
            if(map.containsKey(i) == false){
                dp[i] = dp[i-1];
            }else{
                int boardNotInstalled = dp[i-1];
                int boardInstalled = map.get(i);
                if(i>=t+1){
                    boardInstalled += dp[i-t-1];
                }
                dp[i] = Math.max(boardNotInstalled,boardInstalled);
            }
        }
        return dp[m];
    }

		

		DP(22 July)

Q14 Burst Balloons
https://leetcode.com/problems/burst-balloons/

(Approach 1)

public int maxCoins(int[] nums) {
        int[] arr = new int[nums.length+2];
        arr[0] = 1;
        arr[arr.length-1] = 1;
        for(int i = 0; i<nums.length; i++){
            arr[i+1] = nums[i];
        }
        int[][] dp = new int[arr.length][arr.length];
        return burst(arr,0,arr.length-1,dp);
    }
    public int burst(int[] arr, int left, int right, int[][] dp){
        if(left+1==right){
            return 0;
        }
        if(dp[left][right]>0){
            return dp[left][right];
        }
        int ans = 0;
        for(int i = left+1; i<right; i++){
            int tempLeft = burst(arr,left,i,dp);
            int tempRight = burst(arr,i,right,dp);
            
            int currAns = tempLeft + tempRight + arr[left]*arr[i]*arr[right];
            ans = Math.max(ans,currAns);
        }
        dp[left][right] = ans;
        return ans;
    }

